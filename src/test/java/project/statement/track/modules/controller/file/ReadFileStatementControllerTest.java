package project.statement.track.modules.controller.file;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;
import java.util.Base64;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.web.multipart.MultipartFile;

import lib.base.backend.exception.data.BusinessException;
import lib.base.backend.pojo.rest.GenericResponsePojo;
import lib.base.backend.test.assessment.Assessment;
import project.statement.track.ProjectIntegrationTest;
import project.statement.track.app.beans.pojos.petition.request.LoadFileBase64StatementRequestPojo;
import project.statement.track.app.beans.pojos.petition.request.LoadFileStatementRequestPojo;

@SuppressWarnings("unchecked")
class ReadFileStatementControllerTest extends ProjectIntegrationTest {
	
	@Autowired
	ReadFileStatementController readFileStatementController;

	@Test
	void testReadStatementSnowBallFileBase64() throws BusinessException {
		
		//2023_01
		String filePart1 = "PGRpdiBjbGFzcz0icm93Ij4NCiAgIDxkaXYgY2xhc3M9ImNvbC0xMiBiZy1wcmltYXJ5IG10LTMgdGV4dC13aGl0ZSBmdy02Ij4NCiAgICAgIDIwMjMtMDEtMjcNCiAgIDwvZGl2Pg0KICAgPGRpdiBjbGFzcz0iY29sLTEyIG10LTMgdWZjIHVmY18yMjMwNDQzIiBkYXRhLWN1YWw9IjIyMzA0NDMiIGRhdGEtbT0iMTA1LjE0Ij4NCiAgICAgIDxkaXYgY2xhc3M9ImNhcmQgYm9yZGVyLXN1Y2Nlc3MgcC0zIj4NCiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiBjb2wtbWQtMyI+DQogICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYiPlNhbGRvIEFudGVyaW9yPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtZGFyayBteC0yIGZ3LTYiPg0KICAgICAgICAgICAgICAgICAgJDQsMTQ5LjA1DQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02IHRleHQtc3VjY2VzcyI+SW5ncmVzbzwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQxMDUuMTQgTVhOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTUgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5TYWxkbyBBY3R1YWw8L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1kYXJrIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkNCwyNTQuMTkNCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSBjb2wtbWQtMiI+DQogICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYiPkhvcmE8L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1tdXRlZCBteC0yIj4NCiAgICAgICAgICAgICAgICAgIDE1OjI4OjE5ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIgY29sLW1kLTEiPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bl9fcGx1cyBidG5fX3BsdXMtLXVmYzIyMzA0NDMiIGRhdGEtdGFnPSJ1ZmMiIGRhdGEtaWFjdHVhbD0iMjIzMDQ0MyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48c21hbGwgY2xhc3M9InRleHQtc3VjY2VzcyI+PGkgY2xhc3M9ImZhLXNvbGlkIGZhLXBsdXMiPjwvaT48L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bl9fbWludXMgYnRuX19taW51cy0tdWZjMjIzMDQ0MyIgZGF0YS10YWc9InVmYyIgZGF0YS1pYWN0dWFsPSIyMjMwNDQzIiBzdHlsZT0iIj48c21hbGwgY2xhc3M9InRleHQtc3VjY2VzcyI+PGkgY2xhc3M9ImZhLXNvbGlkIGZhLW1pbnVzIj48L2k+PC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGZvbmRlb19fc2hvd01vcmUtLXVmYzIyMzA0NDMiIHN0eWxlPSIiPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB4LTMgcHQtMiBmb25kZW9fX21hc0luZm8iPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdC0zIGJvcmRlciBib3JkZXItcmlnaHQtMCBib3JkZXItYm90dG9tLTAgYm9yZGVyLWxlZnQtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5Nb3ZpbWllbnRvPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPlBhZ28gZGUgQ29taXNpw7NuIFZhcmlhYmxlPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPkVtcHJlc2E8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+SU5WRU5USVZFIFBPV0VSPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPkZlY2hhIGRlIElFPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPjIwMjItMTAtMjE8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+VHJhbnNmaWVyZTwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij5Tbm93YmFsbDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5SZWNpYmU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+Um9kcmlnbyBBZ3VpbGFyIEpyIC48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KICAgPC9kaXY+DQogICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtMyB1ZmMgdWZjXzIyMjAzMzIiIGRhdGEtY3VhbD0iMjIyMDMzMiIgZGF0YS1tPSI4Ni40MCI+DQogICAgICA8ZGl2IGNsYXNzPSJjYXJkIGJvcmRlci1zdWNjZXNzIHAtMyI+DQogICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5TYWxkbyBBbnRlcmlvcjwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWRhcmsgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQ0LDA2Mi42NQ0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiB0ZXh0LXN1Y2Nlc3MiPkluZ3Jlc288L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zdWNjZXNzIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkODYuNDAgTVhOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTUgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5TYWxkbyBBY3R1YWw8L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1kYXJrIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkNCwxNDkuMDUNCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSBjb2wtbWQtMiI+DQogICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYiPkhvcmE8L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1tdXRlZCBteC0yIj4NCiAgICAgICAgICAgICAgICAgIDE0OjE4OjQ2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIgY29sLW1kLTEiPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bl9fcGx1cyBidG5fX3BsdXMtLXVmYzIyMjAzMzIiIGRhdGEtdGFnPSJ1ZmMiIGRhdGEtaWFjdHVhbD0iMjIyMDMzMiIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48c21hbGwgY2xhc3M9InRleHQtc3VjY2VzcyI+PGkgY2xhc3M9ImZhLXNvbGlkIGZhLXBsdXMiPjwvaT48L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bl9fbWludXMgYnRuX19taW51cy0tdWZjMjIyMDMzMiIgZGF0YS10YWc9InVmYyIgZGF0YS1pYWN0dWFsPSIyMjIwMzMyIiBzdHlsZT0iIj48c21hbGwgY2xhc3M9InRleHQtc3VjY2VzcyI+PGkgY2xhc3M9ImZhLXNvbGlkIGZhLW1pbnVzIj48L2k+PC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGZvbmRlb19fc2hvd01vcmUtLXVmYzIyMjAzMzIiIHN0eWxlPSIiPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB4LTMgcHQtMiBmb25kZW9fX21hc0luZm8iPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdC0zIGJvcmRlciBib3JkZXItcmlnaHQtMCBib3JkZXItYm90dG9tLTAgYm9yZGVyLWxlZnQtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5Nb3ZpbWllbnRvPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPlBhZ28gZGUgQ29taXNpw7NuIFZhcmlhYmxlPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPkVtcHJlc2E8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+QUdST0RFU0VSVDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5GZWNoYSBkZSBJRTwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij4yMDIzLTAxLTAzPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPlRyYW5zZmllcmU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+U25vd2JhbGw8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+UmVjaWJlPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPlJvZHJpZ28gQWd1aWxhciBKciAuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgPC9kaXY+DQogICAgICA8L2Rpdj4NCiAgIDwvZGl2Pg0KICAgPGRpdiBjbGFzcz0iY29sLTEyIGJnLXByaW1hcnkgbXQtMyB0ZXh0LXdoaXRlIGZ3LTYiPg0KICAgICAgMjAyMy0wMS0yNg0KICAgPC9kaXY+DQogICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtMyB1ZmMgdWZjXzIyMTQzNjMiIGRhdGEtY3VhbD0iMjIxNDM2MyIgZGF0YS1tPSI2OC40OSI+DQogICAgICA8ZGl2IGNsYXNzPSJjYXJkIGJvcmRlci1zdWNjZXNzIHAtMyI+DQogICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5TYWxkbyBBbnRlcmlvcjwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWRhcmsgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQzLDk5NC4xNg0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiB0ZXh0LXN1Y2Nlc3MiPkluZ3Jlc288L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zdWNjZXNzIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkNjguNDkgTVhOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTUgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5TYWxkbyBBY3R1YWw8L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1kYXJrIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkNCwwNjIuNjUNCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSBjb2wtbWQtMiI+DQogICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYiPkhvcmE8L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1tdXRlZCBteC0yIj4NCiAgICAgICAgICAgICAgICAgIDE2OjQ5OjQ2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTIgY29sLW1kLTEiPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bl9fcGx1cyBidG5fX3BsdXMtLXVmYzIyMTQzNjMiIGRhdGEtdGFnPSJ1ZmMiIGRhdGEtaWFjdHVhbD0iMjIxNDM2MyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij48c21hbGwgY2xhc3M9InRleHQtc3VjY2VzcyI+PGkgY2xhc3M9ImZhLXNvbGlkIGZhLXBsdXMiPjwvaT48L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bl9fbWludXMgYnRuX19taW51cy0tdWZjMjIxNDM2MyIgZGF0YS10YWc9InVmYyIgZGF0YS1pYWN0dWFsPSIyMjE0MzYzIiBzdHlsZT0iIj48c21hbGwgY2xhc3M9InRleHQtc3VjY2VzcyI+PGkgY2xhc3M9ImZhLXNvbGlkIGZhLW1pbnVzIj48L2k+PC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGZvbmRlb19fc2hvd01vcmUtLXVmYzIyMTQzNjMiIHN0eWxlPSIiPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB4LTMgcHQtMiBmb25kZW9fX21hc0luZm8iPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdC0zIGJvcmRlciBib3JkZXItcmlnaHQtMCBib3JkZXItYm90dG9tLTAgYm9yZGVyLWxlZnQtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5Nb3ZpbWllbnRvPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPlBhZ28gZGUgQ29taXNpw7NuIFZhcmlhYmxlPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPkVtcHJlc2E8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+TU9OSUZJQzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5GZWNoYSBkZSBJRTwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij4yMDIzLTAxLTAyPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPlRyYW5zZmllcmU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+U25vd2JhbGw8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+UmVjaWJlPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPlJvZHJpZ28gQWd1aWxhciBKciAuPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgPC9kaXY+DQogICAgICA8L2Rpdj4NCiAgIDwvZGl2Pg0KICAgPGRpdiBjbGFzcz0iY29sLTEyIGJnLXByaW1hcnkgbXQtMyB0ZXh0LXdoaXRlIGZ3LTYiPg0KICAgICAgMjAyMy0wMS0yNQ0KICAgPC9kaXY+DQogICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXQtMyB1ZmMgdWZjXzIxOTkxMzMiIGRhdGEtY3VhbD0iMjE5OTEzMyIgZGF0YS1tPSIxMTYuNzYiPg0KICAgICAgPGRpdiBjbGFzcz0iY2FyZCBib3JkZXItc3VjY2VzcyBwLTMiPg0KICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiI+U2FsZG8gQW50ZXJpb3I8L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1kYXJrIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkMyw4NzcuNDANCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiBjb2wtbWQtMyI+DQogICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYgdGV4dC1zdWNjZXNzIj5JbmdyZXNvPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtc3VjY2VzcyBteC0yIGZ3LTYiPg0KICAgICAgICAgICAgICAgICAgJDExNi43NiBNWE4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSBjb2wtbWQtMyI+DQogICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYiPlNhbGRvIEFjdHVhbDwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWRhcmsgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQzLDk5NC4xNg0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC01IGNvbC1tZC0yIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiI+SG9yYTwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LW11dGVkIG14LTIiPg0KICAgICAgICAgICAgICAgICAgMTk6NTM6MDcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiBjb2wtbWQtMSI+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4gYnRuX19wbHVzIGJ0bl9fcGx1cy0tdWZjMjE5OTEzMyIgZGF0YS10YWc9InVmYyIgZGF0YS1pYWN0dWFsPSIyMTk5MTMzIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxzbWFsbCBjbGFzcz0idGV4dC1zdWNjZXNzIj48aSBjbGFzcz0iZmEtc29saWQgZmEtcGx1cyI+PC9pPjwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4gYnRuX19taW51cyBidG5fX21pbnVzLS11ZmMyMTk5MTMzIiBkYXRhLXRhZz0idWZjIiBkYXRhLWlhY3R1YWw9IjIxOTkxMzMiIHN0eWxlPSIiPjxzbWFsbCBjbGFzcz0idGV4dC1zdWNjZXNzIj48aSBjbGFzcz0iZmEtc29saWQgZmEtbWludXMiPjwvaT48L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgZm9uZGVvX19zaG93TW9yZS0tdWZjMjE5OTEzMyIgc3R5bGU9IiI+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHgtMyBwdC0yIGZvbmRlb19fbWFzSW5mbyI+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB0LTMgYm9yZGVyIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBib3JkZXItbGVmdC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPk1vdmltaWVudG88L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+UGFnbyBkZSBDb21pc2nDs24gVmFyaWFibGU8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC02Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+RW1wcmVzYTwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij5LT1RFT1M8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+RmVjaGEgZGUgSUU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+MjAyMi0wNS0xNDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5UcmFuc2ZpZXJlPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPlNub3diYWxsPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPlJlY2liZTwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij5Sb2RyaWdvIEFndWlsYXIgSnIgLjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQogICA8L2Rpdj4NCiAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC0zIHVmYyB1ZmNfMjE5MzQ3NyIgZGF0YS1jdWFsPSIyMTkzNDc3IiBkYXRhLW09Ijk4LjY3Ij4NCiAgICAgIDxkaXYgY2xhc3M9ImNhcmQgYm9yZGVyLXN1Y2Nlc3MgcC0zIj4NCiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiBjb2wtbWQtMyI+DQogICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYiPlNhbGRvIEFudGVyaW9yPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtZGFyayBteC0yIGZ3LTYiPg0KICAgICAgICAgICAgICAgICAgJDMsNzc4LjczDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02IHRleHQtc3VjY2VzcyI+SW5ncmVzbzwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQ5OC42NyBNWE4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNSBjb2wtbWQtMyI+DQogICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYiPlNhbGRvIEFjdHVhbDwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWRhcmsgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQzLDg3Ny40MA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC01IGNvbC1tZC0yIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiI+SG9yYTwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LW11dGVkIG14LTIiPg0KICAgICAgICAgICAgICAgICAgMTQ6Mjk6NDggICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMiBjb2wtbWQtMSI+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4gYnRuX19wbHVzIGJ0bl9fcGx1cy0tdWZjMjE5MzQ3NyIgZGF0YS10YWc9InVmYyIgZGF0YS1pYWN0dWFsPSIyMTkzNDc3IiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxzbWFsbCBjbGFzcz0idGV4dC1zdWNjZXNzIj48aSBjbGFzcz0iZmEtc29saWQgZmEtcGx1cyI+PC9pPjwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJidG4gYnRuX19taW51cyBidG5fX21pbnVzLS11ZmMyMTkzNDc3IiBkYXRhLXRhZz0idWZjIiBkYXRhLWlhY3R1YWw9IjIxOTM0NzciIHN0eWxlPSIiPjxzbWFsbCBjbGFzcz0idGV4dC1zdWNjZXNzIj48aSBjbGFzcz0iZmEtc29saWQgZmEtbWludXMiPjwvaT48L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgZm9uZGVvX19zaG93TW9yZS0tdWZjMjE5MzQ3NyIgc3R5bGU9IiI+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHgtMyBwdC0yIGZvbmRlb19fbWFzSW5mbyI+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHB0LTMgYm9yZGVyIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBib3JkZXItbGVmdC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPk1vdmltaWVudG88L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+UGFnbyBkZSBST0RJPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPkVtcHJlc2E8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+UmVnZW5lcmEgTcOpeGljbzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5GZWNoYSBkZSBJRTwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij4yMDIzLTAxLTIwPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPlRyYW5zZmllcmU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+QWxiZXJ0byBLdXJpIE9yb3pjbzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5SZWNpYmU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+Um9kcmlnbyBBZ3VpbGFyIEpyIC48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KICAgPC9kaXY+DQogICA8ZGl2IGNsYXNzPSJjb2wtMTIgYmctcHJpbWFyeSBtdC0zIHRleHQtd2hpdGUgZnctNiI+DQogICAgICAyMDIzLTAxLTIzDQogICA8L2Rpdj4NCiAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC0zIHVmYyB1ZmNfMjE4MzgzNCIgZGF0YS1jdWFsPSIyMTgzODM0IiBkYXRhLW09IjExNC45OCI+DQogICAgICA8ZGl2IGNsYXNzPSJjYXJkIGJvcmRlci1zdWNjZXNzIHAtMyI+DQogICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5TYWxkbyBBbnRlcmlvcjwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWRhcmsgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQzLDY2My43NQ0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiB0ZXh0LXN1Y2Nlc3MiPkluZ3Jlc288L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zdWNjZXNzIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkMTE0Ljk4IE1YTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC01IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiI+U2FsZG8gQWN0dWFsPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtZGFyayBteC0yIGZ3LTYiPg0KICAgICAgICAgICAgICAgICAgJDMsNzc4LjczDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTUgY29sLW1kLTIiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5Ib3JhPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtbXV0ZWQgbXgtMiI+DQogICAgICAgICAgICAgICAgICAxNzoyMzo0MiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIGNvbC1tZC0xIj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG5fX3BsdXMgYnRuX19wbHVzLS11ZmMyMTgzODM0IiBkYXRhLXRhZz0idWZjIiBkYXRhLWlhY3R1YWw9IjIxODM4MzQiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPjxpIGNsYXNzPSJmYS1zb2xpZCBmYS1wbHVzIj48L2k+PC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG5fX21pbnVzIGJ0bl9fbWludXMtLXVmYzIxODM4MzQiIGRhdGEtdGFnPSJ1ZmMiIGRhdGEtaWFjdHVhbD0iMjE4MzgzNCIgc3R5bGU9IiI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPjxpIGNsYXNzPSJmYS1zb2xpZCBmYS1taW51cyI+PC9pPjwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBmb25kZW9fX3Nob3dNb3JlLS11ZmMyMTgzODM0IiBzdHlsZT0iIj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBweC0zIHB0LTIgZm9uZGVvX19tYXNJbmZvIj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+DQogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHQtMyBib3JkZXIgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWJvdHRvbS0wIGJvcmRlci1sZWZ0LTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+TW92aW1pZW50bzwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij5QYWdvIGRlIFJPREk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC02Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+RW1wcmVzYTwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij5DaWlyY3VsYXI8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+RmVjaGEgZGUgSUU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+MjAyMy0wMS0yMzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5UcmFuc2ZpZXJlPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPkNyaXN0aW5hIEJhcmJhIEZlcm7DoW5kZXogVmlsbGFudWV2YTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5SZWNpYmU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+Um9kcmlnbyBBZ3VpbGFyIEpyIC48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICA8L2Rpdj4NCiAgICAgIDwvZGl2Pg0KICAgPC9kaXY+DQogICA8ZGl2IGNsYXNzPSJjb2wtMTIgYmctcHJpbWFyeSBtdC0zIHRleHQtd2hpdGUgZnctNiI+DQogICAgICAyMDIzLTAxLTIwDQogICA8L2Rpdj4NCiAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC0zIHVmYyB1ZmNfMjE3NjQ2MyIgZGF0YS1jdWFsPSIyMTc2NDYzIiBkYXRhLW09IjExMC41NSI+DQogICAgICA8ZGl2IGNsYXNzPSJjYXJkIGJvcmRlci1zdWNjZXNzIHAtMyI+DQogICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5TYWxkbyBBbnRlcmlvcjwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWRhcmsgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQzLDU1My4yMA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiB0ZXh0LXN1Y2Nlc3MiPkluZ3Jlc288L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zdWNjZXNzIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkMTEwLjU1IE1YTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC01IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiI+U2FsZG8gQWN0dWFsPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtZGFyayBteC0yIGZ3LTYiPg0KICAgICAgICAgICAgICAgICAgJDMsNjYzLjc1DQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTUgY29sLW1kLTIiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5Ib3JhPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtbXV0ZWQgbXgtMiI+DQogICAgICAgICAgICAgICAgICAyMToyMDowOSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIGNvbC1tZC0xIj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG5fX3BsdXMgYnRuX19wbHVzLS11ZmMyMTc2NDYzIiBkYXRhLXRhZz0idWZjIiBkYXRhLWlhY3R1YWw9IjIxNzY0NjMiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPjxpIGNsYXNzPSJmYS1zb2xpZCBmYS1wbHVzIj48L2k+PC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG5fX21pbnVzIGJ0bl9fbWludXMtLXVmYzIxNzY0NjMiIGRhdGEtdGFnPSJ1ZmMiIGRhdGEtaWFjdHVhbD0iMjE3NjQ2MyIgc3R5bGU9IiI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPjxpIGNsYXNzPSJmYS1zb2xpZCBmYS1taW51cyI+PC9pPjwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBmb25kZW9fX3Nob3dNb3JlLS11ZmMyMTc2NDYzIiBzdHlsZT0iIj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBweC0zIHB0LTIgZm9uZGVvX19tYXNJbmZvIj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+DQogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHQtMyBib3JkZXIgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWJvdHRvbS0wIGJvcmRlci1sZWZ0LTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+TW92aW1pZW50bzwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij5QYWdvIGRlIENvbWlzacOzbiBWYXJpYWJsZTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5FbXByZXNhPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPkphbGludiA0LjA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+RmVjaGEgZGUgSUU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+MjAyMy0wMS0yNzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5UcmFuc2ZpZXJlPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPlNub3diYWxsPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCI+PHNtYWxsPlJlY2liZTwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij5Sb2RyaWdvIEFndWlsYXIgSnIgLjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQogICA8L2Rpdj4NCiAgIDxkaXYgY2xhc3M9ImNvbC0xMiBtdC0zIHVmYyB1ZmNfMjE2OTAxMiIgZGF0YS1jdWFsPSIyMTY5MDEyIiBkYXRhLW09IjExNS4zMiI+DQogICAgICA8ZGl2IGNsYXNzPSJjYXJkIGJvcmRlci1zdWNjZXNzIHAtMyI+DQogICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTMiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5TYWxkbyBBbnRlcmlvcjwvc21hbGw+DQogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWRhcmsgbXgtMiBmdy02Ij4NCiAgICAgICAgICAgICAgICAgICQzLDQzNy44OA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiB0ZXh0LXN1Y2Nlc3MiPkluZ3Jlc288L3NtYWxsPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zdWNjZXNzIG14LTIgZnctNiI+DQogICAgICAgICAgICAgICAgICAkMTE1LjMyIE1YTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC01IGNvbC1tZC0zIj4NCiAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiI+U2FsZG8gQWN0dWFsPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtZGFyayBteC0yIGZ3LTYiPg0KICAgICAgICAgICAgICAgICAgJDMsNTUzLjIwDQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTUgY29sLW1kLTIiPg0KICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5Ib3JhPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtbXV0ZWQgbXgtMiI+DQogICAgICAgICAgICAgICAgICAyMDozOToxNCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0yIGNvbC1tZC0xIj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG5fX3BsdXMgYnRuX19wbHVzLS11ZmMyMTY5MDEyIiBkYXRhLXRhZz0idWZjIiBkYXRhLWlhY3R1YWw9IjIxNjkwMTIiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPjxpIGNsYXNzPSJmYS1zb2xpZCBmYS1wbHVzIj48L2k+PC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG5fX21pbnVzIGJ0bl9fbWludXMtLXVmYzIxNjkwMTIiIGRhdGEtdGFnPSJ1ZmMiIGRhdGEtaWFjdHVhbD0iMjE2OTAxMiIgc3R5bGU9IiI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXN1Y2Nlc3MiPjxpIGNsYXNzPSJmYS1zb2xpZCBmYS1taW51cyI+PC9pPjwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBmb25kZW9fX3Nob3dNb3JlLS11ZmMyMTY5MDEyIiBzdHlsZT0iIj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBweC0zIHB0LTIgZm9uZGVvX19tYXNJbmZvIj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+DQogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcHQtMyBib3JkZXIgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWJvdHRvbS0wIGJvcmRlci1sZWZ0LTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+TW92aW1pZW50bzwvc21hbGw+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3LTEwMCBmdy02Ij5QYWdvIGRlIENvbWlzacOzbiBWYXJpYWJsZTwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5FbXByZXNhPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIGZ3LTYiPkpBTElOViAzLjA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InctMTAwIj48c21hbGw+RmVjaGEgZGUgSUU8L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAgZnctNiI+MjAyMy0wMS0yMzwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idy0xMDAiPjxzbWFsbD5UcmFuc2ZpZXJlPC9zbWFsbD48L2Rpdj4NCiAgICAgICAgI";
		String filePart2 = "";
		
		LoadFileBase64StatementRequestPojo requestPojo = new LoadFileBase64StatementRequestPojo();
		requestPojo.setFile(filePart1 + filePart2);
		
		ResponseEntity<GenericResponsePojo<String>> response = readFileStatementController.readStatementSnowBallFileBase64(requestPojo);
		
		Assessment.assertResponseData(response);
		assertNotNull(response.getBody().getData());
	}
	
	@Test
	void testReadStatementSnowBallFileBase64_2() throws BusinessException {
		
		//2023_02
		String filePart1 = "PGRpdiBjbGFzcz0icm93Ij4NCiAgIDxkaXYgY2xhc3M9ImNvbC0xMiBwYi0zIG1iLTMgYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItbGVmdC0wIj4NCiAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBteC1hdXRvIGJvcmRlciBweC0zIG1iLTMiPg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2JfYWRxdWlyaXIgc2JteF9hZHF1aXJpciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTYgZC1ub25lIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItbGVmdC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1kYXJrIHB5LTMgbS0wIj5PcmRlciBCb29rPC9oNj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJweC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD48c3Bhbj5QcmVjaW8gPC9zcGFuPjxzcGFuIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSI+TVhOPC9zcGFuPjwvc21hbGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHgtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGw+PHNwYW4+Q2FudGlkYWQgPC9zcGFuPjxzcGFuIGNsYXNzPSJjcnlwdG9fc2hvcnROYW1lIj48L3NwYW4+PC9zbWFsbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJweC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbWFsbD48c3Bhbj5PcmRlbiBBYmllcnRhIDwvc3Bhbj48L3NtYWxsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93IHRleHQtZGFuZ2VyIHVsdGltYV92ZW50YSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJweC0yIHByZWNpbyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQgY2FudGlkYWQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHgtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQgb3JkZW5fYWJpZXJ0YSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJweC0yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNiBib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1ib3R0b20tMCBteC1hdXRvIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItbGVmdC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJvcmRlciBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWxlZnQtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtZGFyayBweS0zIG0tMCI+T3JkZXIgRW50cnk8L2g2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1yaWdodC0wIGJvcmRlci1sZWZ0LTAgcHQtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1wcmltYXJ5IGZ3LTYgYm9yZGVyIGJvcmRlci1wcmltYXJ5IGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItbGVmdC0wIHBiLTEiPk1lcmNhZG88L2E+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1kYXJrIG10LTMiPkNvbXByYXI8L2g2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGVyVHJhbnNhY3Rpb24iIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtdXBwZXJjYXNlIHB0LTMiPjxzbWFsbCBjbGFzcz0iZnctNiI+UG9yIGZhdm9yIGVzcGVyZSBtaWVudHJhcyBzZSByZWFsaXphIHN1IHRyYW5zYWNjacOzbiwgbm8gY2llcnJlIGVzdGEgdmVudGFuYSwgZW4gY3VhbnRvIHRlcm1pbmUgc3UgdHJhbnNhY2Npw7NuIHNlcsOhIHJlZGlyaWdpZG8sIGdyYWNpYXMuPC9zbWFsbD48L2g2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9hZGVyIGxvYWRlclRyYW5zYWN0aW9uIiBzdHlsZT0ibWFyZ2luOiAzZW0gYXV0bzsgZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhLXJlZ3VsYXIgZmEtc25vd2ZsYWtlIGZhLTh4IGZhLXNwaW4iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0cmFuc2FjdGlvbnNfaW5mbyBzbWFsbCBweS0zIGJvcmRlciBib3JkZXItcmlnaHQtMCBib3JkZXItYm90dG9tLTAgYm9yZGVyLWxlZnQtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyYW5zYWN0aW9uc19zdWNjZXNzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2JfY29uZmlndXJhZG9yIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1sYWJlbCBjbGFzcz0ibS0wIG1iLTMiPjxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1kYXJrIG10LTIgZnctOSI+wr9Db24gcXVlIENSWVBUTyBjb21wcmFyYXMgU25vd2JhbGwgQ29pbnM/PC9zbWFsbD48L2xhYmVsLS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im0tMCI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWRhcmsgbXQtMiBmdy05Ij7Cv0N1w6FudG9zIFNub3diYWxsIENvaW5zIEFEUVVJUklSQVM/PC9zbWFsbD48YnI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02IHNiY29pbl9taW5pbWFfY2FudGlkYWQiPkxhIGNhbnRpZGFkIG3DrW5pbWEgZGUgTVhOIHBhcmEgYWRxdWlyaXIgZXMgZGUgMTAwIE1YTjwvc21hbGw+PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBwbC0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBwbC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtdXBwZXJjYXNlIGlucHV0X2luZm9fcmlnaHQgcHQtc20tMyBwdC1tZC00IHByLXNtLTMgcHItbWQtNCBtci00IiBzdHlsZT0iei1pbmRleDogMTsiPjxzcGFuIGNsYXNzPSJmdy02IHRleHQtbXV0ZWQgcGwtNCBib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBib3JkZXItd2FybmluZyBkLW5vbmUgZC1zbS1ub25lIGQtbWQtYmxvY2sgZC1sZy1ibG9jayI+TVhOPC9zcGFuPjxzcGFuIGNsYXNzPSJmdy02IHRleHQtbXV0ZWQgcGwtNCBib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBib3JkZXItd2FybmluZyBkLW5vbmUgZC1zbS1ibG9jayBkLW1kLW5vbmUgZC1sZy1ub25lIj5TQk1YPC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9Im51bWJlciIgY2xhc3M9ImZvcm0tY29udHJvbCBteS1zbS0yIG15LW1kLTMgYm9yZGVyIGJvcmRlci13YXJuaW5nIiBwbGFjZWhvbGRlcj0iMCIgbmFtZT0ic2Jjb2luX2NhbnRpZGFkIiBkYXRhLXZpZXc9ImlucHV0X2luZm9fcmlnaHQiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDsgcG9zaXRpb246IHJlbGF0aXZlOyB6LWluZGV4OiAyOyIgdmFsdWU9IjEwMCI+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1kaXY+PHNtYWxsIGNsYXNzPSJmdy02Ij4rIDAuMDIlIGRlIENvbWlzacOzbiBwb3IgU0JNWDwvc21hbGw+PC9kaXYtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTQgcHQtMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgdGV4dC1jZW50ZXIgbXQtMiBwdC0xIj5QcmVjaW88L2g2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiBjb2wtbWQtOCBwdC0zIHBsLTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC11cHBlcmNhc2UgaW5wdXRfaW5mb19yaWdodCBwdC1zbS0zIHB0LW1kLTQgcHItc20tMSBwci1tZC00IG1yLTQiPjxzcGFuIGNsYXNzPSJmdy02IHRleHQtbXV0ZWQgcGwtNCBib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBkLW5vbmUgZC1zbS1ub25lIGQtbWQtYmxvY2sgZC1sZy1ibG9jayBzYmNvaW5fY3VycmVuY3kiPk1YTjwvc3Bhbj48c3BhbiBjbGFzcz0iZnctNiB0ZXh0LW11dGVkIHBsLTAgcHQtMiBib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBkLW5vbmUgZC1zbS1ibG9jayBkLW1kLW5vbmUgZC1sZy1ub25lIHNiY29pbl9jdXJyZW5jeSI+TVhOPC9zcGFuPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wgcHItNSIgbmFtZT0iY3J5cHRvX3ByZWNpbyIgaWQ9InNiY29pbl9wcmVjaW9fY3J5cHRvc19zYm14IiByZWFkb25seT0iIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtY2VudGVyIj48c21hbGwgY2xhc3M9ImZ3LTYgc2Jjb2luX3RvdGFsY3J5cHRvc19yZXRybyI+PC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTQgcHQtMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtbXV0ZWQgdGV4dC1jZW50ZXIgbXQtMiBwdC0xIj5Ub3RhbDwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1tZC04IHB0LTMgcGwtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBpbnB1dF9pbmZvX3JpZ2h0IHB0LXNtLTMgcHQtbWQtNCBwci1zbS0xIHByLW1kLTQgbXItNCI+PHNwYW4gY2xhc3M9ImZ3LTYgdGV4dC1tdXRlZCBwbC00IGJvcmRlciBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWJvdHRvbS0wIGQtbm9uZSBkLXNtLW5vbmUgZC1tZC1ibG9jayBkLWxnLWJsb2NrIHNiY29pbl9jdXJyZW5jeSI+TVhOPC9zcGFuPjxzcGFuIGNsYXNzPSJmdy02IHRleHQtbXV0ZWQgcGwtMCBwdC0yIGJvcmRlciBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWJvdHRvbS0wIGQtbm9uZSBkLXNtLWJsb2NrIGQtbWQtbm9uZSBkLWxnLW5vbmUgc2Jjb2luX2N1cnJlbmN5Ij5NWE48L3NwYW4+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBwci01IiBuYW1lPSJzYmNvaW5fdG90YWwiIGlkPSJzYmNvaW5fdG90YWxjcnlwdG9zIiByZWFkb25seT0iIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtY2VudGVyIj48c21hbGwgY2xhc3M9ImZ3LTYgc2Jjb2luX3RvdGFsY3J5cHRvc19yZXRybyI+PC9zbWFsbD48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWRpdiBjbGFzcz0iY29sLTEybWItMyBwbC0wIHB0LTMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPjxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1kYXJrIG10LTIgZnctOSI+U2VsZWNjaW9uYSBsYSBkaXJlY2Npw7NuIGRlIHdhbGxldCBhIGxhIHF1ZSBzZSBlbnZpYXJhbiBsYXMgTVhOPC9zbWFsbD48c21hbGwgY2xhc3M9ImZsb2F0LXJpZ2h0Ij5PcGNpb25hbDwvc21hbGw+PC9sYWJlbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0iaXV3IiBjbGFzcz0iZm9ybS1jb250cm9sIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2LS0+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgc2Jjb2luX2NvbG9jYXJfbXNnQ29udGFpbmVyIHB0LTMiIHN0eWxlPSJkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9Im0tMCI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWRhbmdlciBmdy02IHNiY29pbl9jb2xvY2FyX21zZyI+PC9zbWFsbD48L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgbXktMyBwbC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ0biBidG4tY29pbiBidG4tYmxvY2sgcm91bmRlZC0wIHRleHQtdXBwZXJjYXNlIHRleHQtd2hpdGUgY29pbl9wYWdhciIgZGF0YS1wYWdvPSJjcnlwdG9zIj5Db2xvY2FyPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLW5vbmUiIG9uY2xpY2s9InNiY29pbl9jcnlwdG9zX2FjZXB0YV90ZXJtaW5vcygpIiBpZD0iY3J5cHRvc19idG4iPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InNiX2FkcXVpcmlyIHNidXNkX2FkcXVpcmlyIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNiBkLW5vbmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1yaWdodC0wIGJvcmRlci1sZWZ0LTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWRhcmsgcHktMyBtLTAiPk9yZGVyIEJvb2s8L2g2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPjxzcGFuPlByZWNpbyA8L3NwYW4+PHNwYW4gY2xhc3M9InRleHQtdXBwZXJjYXNlIj5TQlVTRDwvc3Bhbj48L3NtYWxsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNtYWxsPjxzcGFuPkNhbnRpZGFkIDwvc3Bhbj48c3BhbiBjbGFzcz0iY3J5cHRvX3Nob3J0TmFtZSI+PC9zcGFuPjwvc21hbGw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHgtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c21hbGw+PHNwYW4+T3JkZW4gQWJpZXJ0YSA8L3NwYW4+PC9zbWFsbD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyB0ZXh0LWRhbmdlciB1bHRpbWFfdmVudGEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHgtMiBwcmVjaW8iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IGNhbnRpZGFkIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InB4LTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IG9yZGVuX2FiaWVydGEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icHgtMiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgY29sLW1kLTYgYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItYm90dG9tLTAgbXgtYXV0byI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGJvcmRlciBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWxlZnQtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1yaWdodC0wIGJvcmRlci1sZWZ0LTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWRhcmsgcHktMyBtLTAiPk9yZGVyIEVudHJ5PC9oNj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItbGVmdC0wIHB0LTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtcHJpbWFyeSBmdy02IGJvcmRlciBib3JkZXItcHJpbWFyeSBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWxlZnQtMCBwYi0xIj5NZXJjYWRvPC9hPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb25leF9sb2FkZXIgbG9hZGVyIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhLXJlZ3VsYXIgZmEtc25vd2ZsYWtlIGZhLTh4IGZhLXNwaW4iPjwvaT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9uZXhfdXNkIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWRhcmsgbXQtMyI+Q29tcHJhcjwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtb25leF9fdXNkLS1jb250YWluZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRpdmlzYSI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJjb3VudHJ5IHctNDAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtOCB0ZXh0LWNlbnRlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWRhcmsiPkNvbXByYTwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1kYXJrIj5WZW50YTwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IHVzZC1jb21wcmEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiB1c2QtdmVudGEiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZ3JhcGhpYyB3LTUwIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FkZXJUcmFuc2FjdGlvbiIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC11cHBlcmNhc2UgcHQtMyI+PHNtYWxsIGNsYXNzPSJmdy02Ij5Qb3IgZmF2b3IgZXNwZXJlIG1pZW50cmFzIHNlIHJlYWxpemEgc3UgdHJhbnNhY2Npw7NuLCBubyBjaWVycmUgZXN0YSB2ZW50YW5hLCBlbiBjdWFudG8gdGVybWluZSBzdSB0cmFuc2FjY2nDs24gc2Vyw6EgcmVkaXJpZ2lkbywgZ3JhY2lhcy48L3NtYWxsPjwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsb2FkZXIgbG9hZGVyVHJhbnNhY3Rpb24iIHN0eWxlPSJtYXJnaW46IDNlbSBhdXRvOyBkaXNwbGF5OiBub25lOyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEtcmVndWxhciBmYS1zbm93Zmxha2UgZmEtOHggZmEtc3BpbiI+PC9pPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRyYW5zYWN0aW9uc19pbmZvIHNtYWxsIHB5LTMgYm9yZGVyIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBib3JkZXItbGVmdC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idHJhbnNhY3Rpb25zX3N1Y2Nlc3MiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJzYl9jb25maWd1cmFkb3IiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWxhYmVsIGNsYXNzPSJtLTAgbWItMyI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWRhcmsgbXQtMiBmdy05Ij7Cv0NvbiBxdWUgQ1JZUFRPIGNvbXByYXJhcyBTbm93YmFsbCBDb2lucz88L3NtYWxsPjwvbGFiZWwtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibS0wIj48c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtZGFyayBtdC0yIGZ3LTkiPsK/Q3XDoW50b3MgU25vd2JhbGwgQ29pbnMgQURRVUlSSVJBUz88L3NtYWxsPjxicj48c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZ3LTYgc2Jjb2luX21pbmltYV9jYW50aWRhZCI+TGEgY2FudGlkYWQgbcOtbmltYSBkZSBTQlVTRCBwYXJhIGFkcXVpcmlyIGVzIGRlIDxzcGFuIGNsYXNzPSJzYnVzZF9taW4iPjEwMDwvc3Bhbj4gU0JVU0Q8L3NtYWxsPjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgcGwtMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgcGwtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBpbnB1dF9pbmZvX3JpZ2h0IHB0LXNtLTMgcHQtbWQtNCBwci1zbS0zIHByLW1kLTQgbXItNCIgc3R5bGU9InotaW5kZXg6IDE7Ij48c3BhbiBjbGFzcz0iZnctNiB0ZXh0LW11dGVkIHBsLTQgYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItYm90dG9tLTAgYm9yZGVyLXdhcm5pbmcgZC1ub25lIGQtc20tbm9uZSBkLW1kLWJsb2NrIGQtbGctYmxvY2siPlNCVVNEPC9zcGFuPjxzcGFuIGNsYXNzPSJmdy02IHRleHQtbXV0ZWQgcGwtNCBib3JkZXIgYm9yZGVyLXRvcC0wIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBib3JkZXItd2FybmluZyBkLW5vbmUgZC1zbS1ibG9jayBkLW1kLW5vbmUgZC1sZy1ub25lIj5TQlVTRDwvc3Bhbj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJudW1iZXIiIGNsYXNzPSJmb3JtLWNvbnRyb2wgbXktc20tMiBteS1tZC0zIGJvcmRlciBib3JkZXItd2FybmluZyIgcGxhY2Vob2xkZXI9IjAiIG5hbWU9InNiY29pbl9jYW50aWRhZCIgZGF0YS12aWV3PSJpbnB1dF9pbmZvX3JpZ2h0IiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IHBvc2l0aW9uOiByZWxhdGl2ZTsgei1pbmRleDogMjsiIHZhbHVlPSI1Ij4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWRpdj48c21hbGwgY2xhc3M9ImZ3LTYiPisgMC4wMiUgZGUgQ29taXNpw7NuIHBvciBTQk1YPC9zbWFsbD48L2Rpdi0tPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiBjb2wtbWQtNCBwdC0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1tdXRlZCB0ZXh0LWNlbnRlciBtdC0yIHB0LTEiPlByZWNpbzwvaDY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC02IGNvbC1tZC04IHB0LTMgcGwtMCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBpbnB1dF9pbmZvX3JpZ2h0IHB0LXNtLTMgcHQtbWQtNCBwci1zbS0xIHByLW1kLTQgbXItNCI+PHNwYW4gY2xhc3M9ImZ3LTYgdGV4dC1tdXRlZCBwbC00IGJvcmRlciBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWJvdHRvbS0wIGQtbm9uZSBkLXNtLW5vbmUgZC1tZC1ibG9jayBkLWxnLWJsb2NrIHNiY29pbl9jdXJyZW5jeSI+TVhOPC9zcGFuPjxzcGFuIGNsYXNzPSJmdy02IHRleHQtbXV0ZWQgcGwtMCBwdC0yIGJvcmRlciBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWJvdHRvbS0wIGQtbm9uZSBkLXNtLWJsb2NrIGQtbWQtbm9uZSBkLWxnLW5vbmUgc2Jjb2luX2N1cnJlbmN5Ij5NWE48L3NwYW4+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgY2xhc3M9ImZvcm0tY29udHJvbCBwci01IiBuYW1lPSJjcnlwdG9fcHJlY2lvIiBpZD0ic2Jjb2luX3ByZWNpb19jcnlwdG9zX3NibXgiIHJlYWRvbmx5PSIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1jZW50ZXIiPjxzbWFsbCBjbGFzcz0iZnctNiBzYmNvaW5fdG90YWxjcnlwdG9zX3JldHJvIj48L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNiBjb2wtbWQtNCBwdC0zIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1tdXRlZCB0ZXh0LWNlbnRlciBtdC0yIHB0LTEiPlRvdGFsPC9oNj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTYgY29sLW1kLTggcHQtMyBwbC0wIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtdXBwZXJjYXNlIGlucHV0X2luZm9fcmlnaHQgcHQtc20tMyBwdC1tZC00IHByLXNtLTEgcHItbWQtNCBtci00Ij48c3BhbiBjbGFzcz0iZnctNiB0ZXh0LW11dGVkIHBsLTQgYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItYm90dG9tLTAgZC1ub25lIGQtc20tbm9uZSBkLW1kLWJsb2NrIGQtbGctYmxvY2sgc2Jjb2luX2N1cnJlbmN5Ij5NWE48L3NwYW4+PHNwYW4gY2xhc3M9ImZ3LTYgdGV4dC1tdXRlZCBwbC0wIHB0LTIgYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItYm90dG9tLTAgZC1ub25lIGQtc20tYmxvY2sgZC1tZC1ub25lIGQtbGctbm9uZSBzYmNvaW5fY3VycmVuY3kiPk1YTjwvc3Bhbj48L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIHByLTUiIG5hbWU9InNiY29pbl90b3RhbCIgaWQ9InNiY29pbl90b3RhbGNyeXB0b3MiIHJlYWRvbmx5PSIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC11cHBlcmNhc2UgdGV4dC1jZW50ZXIiPjxzbWFsbCBjbGFzcz0iZnctNiBzYmNvaW5fdG90YWxjcnlwdG9zX3JldHJvIj48L3NtYWxsPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tZGl2IGNsYXNzPSJjb2wtMTJtYi0zIHBsLTAgcHQtMyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+PHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSB0ZXh0LWRhcmsgbXQtMiBmdy05Ij5TZWxlY2Npb25hIGxhIGRpcmVjY2nDs24gZGUgd2FsbGV0IGEgbGEgcXVlIHNlIGVudmlhcmFuIGxhcyBNWE48L3NtYWxsPjxzbWFsbCBjbGFzcz0iZmxvYXQtcmlnaHQiPk9wY2lvbmFsPC9zbWFsbD48L2xhYmVsPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCBuYW1lPSJpdXciIGNsYXNzPSJmb3JtLWNvbnRyb2wiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXYtLT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBzYmNvaW5fY29sb2Nhcl9tc2dDb250YWluZXIgcHQtMyIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ibS0wIj48c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtZGFuZ2VyIGZ3LTYgc2Jjb2luX2NvbG9jYXJfbXNnIj48L3NtYWxsPjwvbGFiZWw+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBteS0zIHBsLTAiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bi1jb2luIGJ0bi1ibG9jayByb3VuZGVkLTAgdGV4dC11cHBlcmNhc2UgdGV4dC13aGl0ZSBjb2luX3BhZ2FyIiBkYXRhLXBhZ289ImNyeXB0b3MiPkNvbG9jYXI8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtbm9uZSIgb25jbGljaz0ic2Jjb2luX2NyeXB0b3NfYWNlcHRhX3Rlcm1pbm9zKCkiIGlkPSJjcnlwdG9zX2J0biI+PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgPC9kaXY+DQogICAgICA8L2Rpdj4NCiAgICAgIDxkaXYgY2xhc3M9ImNhcmQgcC0zIj4NCiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIiPg0KICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSI+U2FsZG88L2g1Pg0KICAgICAgICAgICAgICAgPHA+DQogICAgICAgICAgICAgICAgICA8c21hbGw+DQogICAgICAgICAgICAgICAgICAgICBBcXXDrSBwdWVkZXMgdmVyIGVsIHNhbGRvIGFjdHVhbCBkZSB0dSBjdWVudGEgZW4gTVhOIChQZXNvcyBNZXhpY2Fub3MpLiBQdWVkZXMgZm9uZGVhciB0dSBjdWVudGEgY29uIDwhLS1DUllQVE9TICgyJSBkZSBjb21pc2lvbiksIC0tPiBTUEVJICgwJSBkZSBjb21pc2lvbikuIEFxdWkgcHVlZGVzICBSRVRJUkFSIHR1IGRpbmVybyBhIHVuYSBjdWVudGEgYmFuY2FyaWEgZGUgdHUgcHJvcGllZGFkLg0KICAgICAgICAgICAgICAgICAgPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDwvcD4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGQtbm9uZSBkLXNtLW5vbmUgZC1tZC1ibG9jayBkLWxnLWJsb2NrIj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+DQogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtNCBwYi0wIj4NCiAgICAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0ibS0wIj48c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtcHJpbWFyeSBmdy02Ij5Ub3RhbDwvc21hbGw+PC9oNT4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTQgbWItMCI+DQogICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Im0tMCI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02IHBiLTAiPkRlcMOzc2l0b3M8L3NtYWxsPjwvaDY+DQogICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC00IHBiLTAiPg0KICAgICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJtLTAiPjxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiI+UmV0aXJvczwvc21hbGw+PC9oNj4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCBtYi0zIj4NCiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZ3LTYiPg0KICAgICAgICAgICAgICAgICAgPGg2IGNsYXNzPSJkLW5vbmUgZC1zbS1ibG9jayBkLW1kLW5vbmUgZC1sZy1ub25lIj48c21hbGwgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtcHJpbWFyeSBmdy02Ij5Ub3RhbDwvc21hbGw+PC9oNj4NCiAgICAgICAgICAgICAgICAgICQ1LDY4MS4xNw0KICAgICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPSJmdy02Ij5NWE48L3NtYWxsPg0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtNCBtYi0zIj4NCiAgICAgICAgICAgICAgIDxkaXY+DQogICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9ImQtbm9uZSBkLXNtLWJsb2NrIGQtbWQtbm9uZSBkLWxnLW5vbmUiPjxzbWFsbCBjbGFzcz0idGV4dC11cHBlcmNhc2UgZnctNiI+RGVww7NzaXRvczwvc21hbGw+PC9oNj4NCiAgICAgICAgICAgICAgICAgICQxNTQsNjc5LjQwDQogICAgICAgICAgICAgICAgICA8c21hbGwgY2xhc3M9ImZ3LTYiPk1YTjwvc21hbGw+DQogICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00IG1iLTMiPg0KICAgICAgICAgICAgICAgPGRpdj4NCiAgICAgICAgICAgICAgICAgIDxoNiBjbGFzcz0iZC1ub25lIGQtc20tYmxvY2sgZC1tZC1ub25lIGQtbGctbm9uZSI+PHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5SZXRpcm9zPC9zbWFsbD48L2g2Pg0KICAgICAgICAgICAgICAgICAgJDE0OCw5OTguMjMNCiAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz0iZnctNiI+TVhOPC9zbWFsbD4NCiAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgYm9yZGVyIGJvcmRlci1yaWdodC0wIGJvcmRlci1ib3R0b20tMCBib3JkZXItbGVmdC0wIHB0LTMiPg0KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtOCBtYi1zbS0zIG1iLW1kLTAgbWItbGctMCI+DQogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02IGZsb2F0LWxlZnQgcHQtMSBwci0yIj5EZXBvc2l0YXI6PC9kaXY+DQogICAgICAgICAgICAgICAgICAgICA8IS0tZGl2IGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXNtIHRleHQtdXBwZXJjYXNlIHRleHQtd2hpdGUgcm91bmRlZC0wIGZsb2F0LWxlZnQgbXgtMSIgb25jbGljaz0ic2Jjb2luX3Npc3RlbWFfcGFnbygnc2Jjb2luX2NyeXB0b3MnKTsiPkNyeXB0b3M8L2Rpdi0tPg0KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbSB0ZXh0LXVwcGVyY2FzZSB0ZXh0LXdoaXRlIHJvdW5kZWQtMCBmbG9hdC1sZWZ0IG1yLTEiIG9uY2xpY2s9InNiY29pbl9zaXN0ZW1hX3BhZ28oJ3NiY29pbl9zcGVpJykiPlNQRUk8L2Rpdj4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgICAgPCEtLWRpdiBjbGFzcz0iY29sLTEyIGNvbC1tZC00IG1iLTMiPg0KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnRuIGJ0bi1zbSB0ZXh0LXVwcGVyY2FzZSByb3VuZGVkLTAiPjwvZGl2Pg0KICAgICAgICAgICAgICAgICAgICAgPC9kaXYtLT4NCiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiBjb2wtbWQtMiBtYi0wIj4NCiAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii4uL3JldGlyYXIiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXNtIGJ0bi1ibG9jayB0ZXh0LXVwcGVyY2FzZSB0ZXh0LXdoaXRlIHJvdW5kZWQtMCI+UmV0aXJhcjwvYT4NCiAgICAgICAgICAgICAgICAgIDwvZGl2Pg0KICAgICAgICAgICAgICAgPC9kaXY+DQogICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgIDwvZGl2Pg0KICAgICAgPC9kaXY+DQogICA8L2Rpdj4NCiAgIDxkaXYgY2xhc3M9ImNvbC0xMiBwYi0zIGJvcmRlciBib3JkZXItdG9wLTAgYm9yZGVyLXJpZ2h0LTAgYm9yZGVyLWxlZnQtMCBkLW5vbmUgZC1zbS1ub25lIGQtbWQtYmxvY2sgZC1sZy1ibG9jayI+DQogICAgICA8IS0taDYgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtZGFyayBtYi0zIj5IaXN0b3JpYWw8L2g2LS0+DQogICAgICA8aDUgY2xhc3M9InRleHQtdXBwZXJjYXNlIHRleHQtZGFyayBtYi0wIj5Nb3ZpbWllbnRvczwvaDU+DQogICAgICA8IS0tZGl2IGNsYXNzPSJyb3cgcGItMyI+DQogICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtMTIgYm9yZGVyIGJvcmRlci10b3AtMCBib3JkZXItcmlnaHQtMCBib3JkZXItbGVmdC0wIj4NCiAgICAgICAgICAgICA8YSBocmVmPSIuLi9mb25kZW8tY3VlbnRhL181XyIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4tc20gcm91bmRlZC0wIHRleHQtdXBwZXJjYXNlIGFjdGl2ZSI+RGVww7NzaXRvczwvYT4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIuLi9mb25kZW8tY3VlbnRhL181X18zIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbSByb3VuZGVkLTAgdGV4dC11cHBlcmNhc2UiPlRyYW5zZmVyZW5jaWFzPC9hPg0KICAgICAgICAgICAgIDxhIGhyZWY9Ii4uL2ZvbmRlby1jdWVudGEvXzVfXzEiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXNtIHJvdW5kZWQtMCB0ZXh0LXVwcGVyY2FzZSI+UmV0aXJvczwvYT4NCiAgICAgICAgICAgICA8YSBocmVmPSIuLi9mb25kZW8tY3VlbnRhL181X18yIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbSByb3VuZGVkLTAgdGV4dC11cHBlcmNhc2UiPkludmVydGlkbyBlbiBhY2Npb25lczwvYT4gICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4NCiAgICAgICAgIDwvZGl2LS0+DQogICA8L2Rpdj4NCiAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+DQogICAgICA8bGFiZWw+PHNtYWxsIGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmdy02Ij5FbGlnZSB1bmEgZmVjaGEgeSBoYXogY2xpYyBlbiB2ZXIgcGFyYSB2ZXIgdHVzIG1vdmltaWVudG9zIGVuIGVzZSBtZXMuPC9zbWFsbD48L2xhYmVsPg0KICAgICAgPGRpdiBjbGFzcz0icm93IHdhbGxldF9fZmVjaGEtLWNvbmZpZ3VyYWRvciI+DQogICAgICAgICA8ZGl2IG";
		String filePart2 = "";
		String filePart3 = "";
		
		LoadFileBase64StatementRequestPojo requestPojo = new LoadFileBase64StatementRequestPojo();
		requestPojo.setFile(filePart1 + filePart2 + filePart3);
		
		ResponseEntity<GenericResponsePojo<String>> response = readFileStatementController.readStatementSnowBallFileBase64(requestPojo);
		
		Assessment.assertResponseData(response);
		assertNotNull(response.getBody().getData());
	}

	@Test
	void testReadStatementSnowBall() throws BusinessException, IOException {

		String base64ContentPart1 = "";
		String base64ContentPart2 = "";
        byte[] decodedBytes = Base64.getDecoder().decode(base64ContentPart1 + base64ContentPart2);
        
		MultipartFile mockFileStatement = new MockMultipartFile("file", "2021_01.html", "application/octet-stream", decodedBytes);
		
		LoadFileStatementRequestPojo requestPojo = new LoadFileStatementRequestPojo();
		requestPojo.setFile(mockFileStatement);
		
		ResponseEntity<GenericResponsePojo<String>> response = readFileStatementController.readStatementSnowBall(requestPojo);
		
		Assessment.assertResponseData(response);
		assertNotNull(response.getBody().getData());
		
	}

}
